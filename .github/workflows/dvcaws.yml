name: DVC_with_S3

on:
  push:
    branches:
      - feature/gradio_Latest
  pull_request:
    branches:
      - feature/aws_dvc_latest

jobs:
  dvc:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install DVC and Boto3
        run: |
          pip install dvc[s3] boto3

      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Set DVC Remote
        run: |
          dvc remote add -d myremote s3://dvc-nagsh-demo
      - name: Enable Debug Logging
        run: export DVC_LOGLEVEL=DEBUG

      - name: Pull DVC Data
        run: |
          dvc pull -v
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2
    
      - name: Set up Python 3.12
        run: uv python install 3.12
    
      - name: Install dependencies
        env:
          UV_EXTRA_INDEX_URL: https://download.pytorch.org/whl/cpu
        run: |
          uv sync
    
      - name: Run tests with coverage
        run: |
            uv run coverage run -m pytest
            uv run coverage xml -o coverage.xml
    
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
            token: ${{ secrets.CODECOV_TOKEN }}
            files: ./coverage.xml
            fail_ci_if_error: true

      - name: Running tracing
        run: |
            source .venv/bin/activate
            python src/script.py    
    
          # Step 2: Create a temporary branch with the required files
      - name: Prepare files for Hugging Face
        run: |
              mkdir temp_push
              cp traced_models/model.pt temp_push/
              cp app.py temp_push/
              cd temp_push
              git init
              git checkout -b temp-hf
              git add .
              git commit -m "Prepare files for Hugging Face"
    
          # Step 3: Add remote Hugging Face repository
      - name: Add remote Hugging Face repository
        env:
          HF: ${{ secrets.HF }}
        run: |
              cd temp_push
              git remote add space https://Nageswar-250:$HF@huggingface.co/spaces//Nageswar-250/Dog_Breed_Classifier
    
          # Step 4: Push files to Hugging Face
      - name: Push to Hugging Face Hub
        env:
              HF: ${{ secrets.HF }}
        run: |
              cd temp_push
              git push --force space temp-hf:main
