name: DVC_with_S3

on:
  push:
    branches:
      - feature/aws_dvc_latest
  pull_request:
    branches:
      - feature/aws_dvc_latest

jobs:
  dvc:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install DVC and Boto3
        run: |
          pip install dvc[s3] boto3

      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Set DVC Remote
        run: |
          dvc remote add -d myremote s3://dvc-nagsh-demo
      - name: Enable Debug Logging
        run: export DVC_LOGLEVEL=DEBUG

      - name: Pull DVC Data
        run: |
          dvc pull -v
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Verify DVC Data Files
        run: |
          dvc status

          - name: Install uv
          uses: astral-sh/setup-uv@v2
    
      - name: Set up Python 3.12
        run: uv python install 3.12
    
      - name: Install dependencies
        env:
          UV_EXTRA_INDEX_URL: https://download.pytorch.org/whl/cpu
        run: |
          uv sync
    
      - name: Run tests with coverage
        run: |
            uv run coverage run -m pytest
            uv run coverage xml -o coverage.xml
    
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
            token: ${{ secrets.CODECOV_TOKEN }}
            files: ./coverage.xml
            fail_ci_if_error: true
    
  build-and-push-image:
        needs: dvc
        runs-on: ubuntu-latest
        permissions:
          contents: read
          packages: write
    
        steps:
        - name: Checkout repository
          uses: actions/checkout@v4
    
        - name: Log in to the Container registry
          uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
          with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
    
        - name: Extract metadata (tags, labels) for Docker
          id: meta
          uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
          with:
            images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            tags: |
              type=raw,value=session-05
              type=sha
    
        - name: Build and push Docker image
          uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
          with:
            context: .
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
              
