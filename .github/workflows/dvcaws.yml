name: DVC_with_S3

on:
  push:
    branches:
      - feature/aws_dvc_latest
  pull_request:
    branches:
      - feature/aws_dvc_latest

jobs:
  dvc:
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install DVC and Boto3
        run: |
          pip install dvc[s3] boto3

      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Set DVC Remote
        run: |
          dvc remote add -d myremote s3://dvc-nagsh-demo
      - name: Enable Debug Logging
        run: export DVC_LOGLEVEL=DEBUG

      - name: Pull DVC Data
        run: |
          dvc pull -v
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2
    
      - name: Set up Python 3.12
        run: uv python install 3.12
    
      - name: Install dependencies
        env:
          UV_EXTRA_INDEX_URL: https://download.pytorch.org/whl/cpu
        run: |
          uv sync
    
      - name: Run tests with coverage
        run: |
            uv run coverage run -m pytest
            uv run coverage xml -o coverage.xml
    
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
            token: ${{ secrets.CODECOV_TOKEN }}
            files: ./coverage.xml
            fail_ci_if_error: true
    
  build-and-push-image:
        needs: dvc
        runs-on: self-hosted
        permissions:
          contents: read
          packages: write
    
        steps:
        - name: Checkout repository
          uses: actions/checkout@v4
    
        - name: Configure AWS Credentials
          run: |
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set region ${{ secrets.AWS_REGION }}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
                      
        - name: Get commit hash
          id: get-commit-hash
          run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"
        - name: Get timestamp
          id: get-timestamp
          run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"
  
        - name: Build, tag, and push the image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
            IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


  pull-and-run-image:
   needs: build-and-push-image
   runs-on: self-hosted
   permissions:
    contents: read
    packages: write

   steps:
    # Step 1: Configure AWS Credentials
    - name: Configure AWS Credentials
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region ${{ secrets.AWS_REGION }}

    # Step 2: Login to Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Step 3: Pull the Docker Image from Amazon ECR
    - name: Pull Docker Image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        COMMIT_HASH: ${{ env.commit-hash }}
        TIMESTAMP: ${{ env.timestamp }}
      run: |
        IMAGE_TAG="${COMMIT_HASH}-${TIMESTAMP}"
        FULL_IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

        echo "Pulling Docker image: ${FULL_IMAGE_URI}"
        docker pull "${FULL_IMAGE_URI}"

    # Step 4: Run the Docker Image
    - name: Run Docker Image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        COMMIT_HASH: ${{ env.commit-hash }}
        TIMESTAMP: ${{ env.timestamp }}
      run: |
        IMAGE_TAG="${COMMIT_HASH}-${TIMESTAMP}"
        FULL_IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

        echo "Running Docker image: ${FULL_IMAGE_URI}"
        docker run --rm "${FULL_IMAGE_URI}"


            
